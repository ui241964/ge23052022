** Everything in Python is Object **
** Every object contains set of methods ***


number
-------
number can be integer or decimal or octal or hexa.


aval = 10
baval = 3.32


string
--------
string is defined in single or double or triple quotes.

aname = 'python programming'
bname = "unix shell scripting"
cname = """scala programming"""


list  ( mutable )
--------
list contains set of elements.
Elements can be set of numbers or strings or any combination.
list elements are defined in [].


alist = [10,20,30,40]
blist = [23.23,43,"java",89]


tuple  ( immutable  , unchangable  , uneditable )
--------
tuple contains set of elements.
Elements can be set of numbers or strings or any combination.
tuple elements are defined in ().
****** Elements inside tuple cant be modified directly  i.e., tuple elements are immutable******



dictionary ( hashmap , json )
------------
dictionary contains elements in key:value pairs
In dictionary, keys are numbers or strings which are used to uniquely identify the value.
               values can be either number or string or list or tuple or dictionary or any other data structure
*** Indexing is not allowed in dictionary ***


syntax:    object = {key:value , key:value ... }
example:    book  = {"chap1":10 ,"chap2":20 }
          bookinfo= {"chap1":[10,"Rita","UK"] ,"chap2":[20,"Ram","US"] }
            book  = {"chap1":10 ,"chap2":20 ,"chap1":1000}
            

set
-----
set is UNORDERED collection of UNIQUE elements of SAME type.




level1
level1
level1
level1
if cond:
    level2
    level2
    level2
level1
level1
level1














classificaiton of objects
--------------------


mutable objects :  list dictionary set

immutable objects : number string tuple











function | definition | submodule | subroutine
---------------------------------------------

- reusability purpose


built-in functions
user defined functions



built-in functions
--------------------
print()
range()
len()
dir()
help()
type()
input()
max()
min()
sum()
isinstance()
round()
chr()
ord()





typecasting functions  ( converting from one object to another object )
---------------------
int()
float()
oct()
hex()
str()
list()
tuple()
dict()
set()








dir(__builtin__)   : will display all the list of builtin functions and exception names



operators
--------------



arithmetic operators :   + - * % /


relational operators :   < <= > >= == !=


assignment operators :( ++ and -- are NOT allowed in python)

val =10
val = val + 1  or val+=1
val = val -1  or val-=1


logical operators
---------------------
and   or not


name = "python"
if len(name) ==6  and name.islower():
   # do something



if len(name) ==6  or name.islower():
   # do something

special operators
-----------------
+
*
in
as


if 5 in alist:
    # do something


if "chap1" in book:
    # do something









file handling
-----------------

- working with flat files ( .txt  .csv  .conf   .log  ..... )


- working with third party files ( .xlsx  .pdf .zip docx ..... )




working with flat files ( .txt  .csv  .conf   .log  ..... )
-------------------------------------------------------------

- read 
- write
- append


opening the file
--------------------

syntax:   object = open(filename,mode)
example:    fobj = open("customers.txt","r")
            # file should exist to read the file

            fobj = open("customers.txt","w")
            case1: If the file is not existing , file will be created first
            case2: If the file is already existing, it overwrites the content

            fobj = open("customers.txt","a")
            case1: If the file is not existing , file will be created first
            case2: If the file is already existing, it appends the content



closing the file
-----------------
fobj.close()










read operation
----------------

- reading line by line using file object
- using fobj.read()
- using fobj.readlines()  -------> list 
- using csv library
- using pandas library





function | definition | submodule | subroutine

- reusability purpose
- we define the block once and call it for multiple times

user defined functions 
------------------------



passing arugments
----------------

fixed arguments
default arguments
keyword arguments
variable length arguments






library | module | package 
---------------------------
Every library contains set of methods which are used perform some specific task.

math library contains all the methods related to mathematics
csv library contains all the csv related methods.


- builtin libraries  ( with anaconda almost 8000+ packages are installed )  ( with IDLE tool 3000+ packages are installed)
----------------------
All the builin libraries which are generally used (math operations, OS opertions, emaling , string manipulations, extracting files using zip rar , copying files, moving files ....)   are installed with python installation



- third party libraries
--------------------------
Depending on the requirement ( working with docx,pdf, data analytics, image processing, database programming , cloud automation , machine learning ...)developer has to install the third party library from


- using pip tool  ( pip install libraryname)
- using conda tool ( comes only with anaconda software) ( conda install libraryname)
- installing manually by downloading from www.pypi.org



whoami    os.getlogin()



re    - regular expressions   (global concept for all the languages ) 
----


- search in the string ( anywhere in the string)
- match ( beginning of the string)
- sub   ( substitute )
- findall  ( loook for all the patterns)
- split    ( split the strin based on pattern )


meta characters  or wild card characters
-------------------------------------------------

^ :  match at the beginning of the string
     if re.search("^python", line):


$  : end of the string
     if re.search("python$", line):


*  : zero or more occurences of hte preceding character
     if re.search("pyt*hon", line):  ( t can be zero times )

+  : one or more occurences of the preceding character
     if re.search("pyt+hon", line):   ( t should exist for atleast once )

? : either zero or one occurence of the preceding character
    if re.search("pyt?hon", line):

. :  any single character
     if re.search(".ython", line):

[] :  character class  ( one single character or digit or symbol )
     if re.search("[qwdrm]ython", line):   # qython or wython or dython or rython or mython



() :  (string1|string2)
     if re.search("python|unix|java", line):


{}  : {min,max} occurences of the preceding character
      if re.search("pyt{5,9}hon", line): 
      if re.search("pyt{5,}hon", line): 
      if re.search("pyt{5}hon", line):


\d :  digit
\s : any whitespaces
\w : word boundary































































































































































tuple


dictionary


set